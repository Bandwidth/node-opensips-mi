#!/usr/bin/env node
"use strict";
var NOMI     = require("commander");
var Bluebird = require("bluebird");
var Client   = require("../lib/Client");
var _        = require("lodash");
var pkg      = require("../package.json");

NOMI.version(pkg.version)
	.option("-H, --host <ip address>", "host rtpengine is running on", _.identity, "127.0.0.1")
	.option("-P, --port <port>", "port rtpengine is listening on", parseInt, 8080)
	.option("-t, --transport <string>", "name of the transport to use", _.identity, "datagram")
	.option("-T, --timeout <milliseconds>", "number of milliseconds to wait before retrying a request", parseInt, 200)
	.option("-R, --retries <count>", "number of times to retry a request", parseInt, 3);

function createClient () {
	return Client.create(NOMI.transport, _.pick(NOMI, "port", "host", "retries", "timeout"));
}

NOMI.command("command <name> [args...]")
	.description("run a command and show the raw response")
	.action(function (name, args) {
		var client = createClient();
		client.command.apply(client, [ name ].concat(args))
		.then(function (response) {
			console.log(response.body.join("\n"));
		})
		.error(function (error) {
			console.error(error.message);
		});
	});

NOMI.command("contacts <table> <aor>")
	.description("run a command and show the raw response")
	.action(function (table, aor) {
		createClient().usrloc.showContact(table, aor)
		.then(function (contacts) {
			console.log(contacts);
		})
		.error(function (error) {
			console.error(error.message);
		});
	});

NOMI.command("help")
	.description("output usage information")
	.action(function () {
		NOMI.help();
	});

NOMI.parse(process.argv);

if (!NOMI.args.length) NOMI.help();
